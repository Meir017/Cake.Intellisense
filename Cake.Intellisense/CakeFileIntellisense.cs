//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. 
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cake.Intellisense
{
	public abstract partial class CakeFileIntellisense : CakeFile
	{
#region ArgumentAliases
		protected System.Boolean HasArgument(System.String name) => throw new System.NotSupportedException();
		protected T Argument<T>(System.String name) => throw new System.NotSupportedException();
		protected T Argument<T>(System.String name, T defaultValue) => throw new System.NotSupportedException();
#endregion
#region EnvironmentAliases
		protected System.String EnvironmentVariable(System.String variable) => throw new System.NotSupportedException();
		protected System.Collections.Generic.IDictionary<System.String,System.String> EnvironmentVariables() => throw new System.NotSupportedException();
		protected System.Boolean HasEnvironmentVariable(System.String variable) => throw new System.NotSupportedException();
		protected System.Boolean IsRunningOnWindows() => throw new System.NotSupportedException();
		protected System.Boolean IsRunningOnUnix() => throw new System.NotSupportedException();
#endregion
#region ProcessAliases
		protected System.Int32 StartProcess(Cake.Core.IO.FilePath fileName) => throw new System.NotSupportedException();
		protected System.Int32 StartProcess(Cake.Core.IO.FilePath fileName, System.String processArguments) => throw new System.NotSupportedException();
		protected System.Int32 StartProcess(Cake.Core.IO.FilePath fileName, Cake.Core.IO.ProcessSettings settings) => throw new System.NotSupportedException();
		protected System.Int32 StartProcess(Cake.Core.IO.FilePath fileName, Cake.Core.IO.ProcessSettings settings, out System.Collections.Generic.IEnumerable<System.String> redirectedOutput) => throw new System.NotSupportedException();
		protected Cake.Core.IO.IProcess StartAndReturnProcess(Cake.Core.IO.FilePath fileName, Cake.Core.IO.ProcessSettings settings) => throw new System.NotSupportedException();
		protected Cake.Core.IO.IProcess StartAndReturnProcess(Cake.Core.IO.FilePath fileName) => throw new System.NotSupportedException();
#endregion
#region ReleaseNotesAliases
		protected System.Collections.Generic.IReadOnlyList<Cake.Common.ReleaseNotes> ParseAllReleaseNotes(Cake.Core.IO.FilePath filePath) => throw new System.NotSupportedException();
		protected Cake.Common.ReleaseNotes ParseReleaseNotes(Cake.Core.IO.FilePath filePath) => throw new System.NotSupportedException();
#endregion
#region XmlPeekAliases
		protected System.String XmlPeek(Cake.Core.IO.FilePath filePath, System.String xpath) => throw new System.NotSupportedException();
		protected System.String XmlPeek(Cake.Core.IO.FilePath filePath, System.String xpath, Cake.Common.Xml.XmlPeekSettings settings) => throw new System.NotSupportedException();
#endregion
#region XmlPokeAliases
		protected void XmlPoke(Cake.Core.IO.FilePath filePath, System.String xpath, System.String value) => throw new System.NotSupportedException();
		protected void XmlPoke(Cake.Core.IO.FilePath filePath, System.String xpath, System.String value, Cake.Common.Xml.XmlPokeSettings settings) => throw new System.NotSupportedException();
		protected System.String XmlPokeString(System.String sourceXml, System.String xpath, System.String value) => throw new System.NotSupportedException();
		protected System.String XmlPokeString(System.String sourceXml, System.String xpath, System.String value, Cake.Common.Xml.XmlPokeSettings settings) => throw new System.NotSupportedException();
#endregion
#region XmlTransformationAlias
		protected System.String XmlTransform(System.String xsl, System.String xml) => throw new System.NotSupportedException();
		protected System.String XmlTransform(System.String xsl, System.String xml, Cake.Common.Xml.XmlTransformationSettings settings) => throw new System.NotSupportedException();
		protected void XmlTransform(Cake.Core.IO.FilePath xslPath, Cake.Core.IO.FilePath xmlPath, Cake.Core.IO.FilePath resultPath) => throw new System.NotSupportedException();
		protected void XmlTransform(Cake.Core.IO.FilePath xslPath, Cake.Core.IO.FilePath xmlPath, Cake.Core.IO.FilePath resultPath, Cake.Common.Xml.XmlTransformationSettings settings) => throw new System.NotSupportedException();
#endregion
#region SecurityAliases
		protected Cake.Common.Security.FileHash CalculateFileHash(Cake.Core.IO.FilePath filePath) => throw new System.NotSupportedException();
		protected Cake.Common.Security.FileHash CalculateFileHash(Cake.Core.IO.FilePath filePath, Cake.Common.Security.HashAlgorithm hashAlgorithm) => throw new System.NotSupportedException();
#endregion
#region DotNetBuildAliases
		protected void DotNetBuild(Cake.Core.IO.FilePath solution) => throw new System.NotSupportedException();
		protected void DotNetBuild(Cake.Core.IO.FilePath solution, System.Action<Cake.Common.Tools.DotNetBuildSettings> configurator) => throw new System.NotSupportedException();
#endregion
#region VSWhereAliases
		protected Cake.Core.IO.DirectoryPath VSWhereLegacy(System.Boolean latest) => throw new System.NotSupportedException();
		protected Cake.Core.IO.DirectoryPathCollection VSWhereLegacy(Cake.Common.Tools.VSWhere.Legacy.VSWhereLegacySettings settings) => throw new System.NotSupportedException();
		protected Cake.Core.IO.DirectoryPath VSWhereLatest() => throw new System.NotSupportedException();
		protected Cake.Core.IO.DirectoryPath VSWhereLatest(Cake.Common.Tools.VSWhere.Latest.VSWhereLatestSettings settings) => throw new System.NotSupportedException();
		protected Cake.Core.IO.DirectoryPathCollection VSWhereAll() => throw new System.NotSupportedException();
		protected Cake.Core.IO.DirectoryPathCollection VSWhereAll(Cake.Common.Tools.VSWhere.All.VSWhereAllSettings settings) => throw new System.NotSupportedException();
		protected Cake.Core.IO.DirectoryPathCollection VSWhereProducts(System.String products) => throw new System.NotSupportedException();
		protected Cake.Core.IO.DirectoryPathCollection VSWhereProducts(System.String products, Cake.Common.Tools.VSWhere.Product.VSWhereProductSettings settings) => throw new System.NotSupportedException();
#endregion
#region VSTestAliases
		protected void VSTest(System.String pattern) => throw new System.NotSupportedException();
		protected void VSTest(System.String pattern, Cake.Common.Tools.VSTest.VSTestSettings settings) => throw new System.NotSupportedException();
		protected void VSTest(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> assemblyPaths) => throw new System.NotSupportedException();
		protected void VSTest(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> assemblyPaths, Cake.Common.Tools.VSTest.VSTestSettings settings) => throw new System.NotSupportedException();
#endregion
#region TextTransformAliases
		protected void TransformTemplate(Cake.Core.IO.FilePath sourceFile) => throw new System.NotSupportedException();
		protected void TransformTemplate(Cake.Core.IO.FilePath sourceFile, Cake.Common.Tools.TextTransform.TextTransformSettings settings) => throw new System.NotSupportedException();
#endregion
#region SpecFlowAliases
		protected void SpecFlowStepDefinitionReport(Cake.Core.IO.FilePath projectFile) => throw new System.NotSupportedException();
		protected void SpecFlowStepDefinitionReport(Cake.Core.IO.FilePath projectFile, Cake.Common.Tools.SpecFlow.StepDefinitionReport.SpecFlowStepDefinitionReportSettings settings) => throw new System.NotSupportedException();
		protected void SpecFlowTestExecutionReport(System.Action<Cake.Core.ICakeContext> action, Cake.Core.IO.FilePath projectFile) => throw new System.NotSupportedException();
		protected void SpecFlowTestExecutionReport(System.Action<Cake.Core.ICakeContext> action, Cake.Core.IO.FilePath projectFile, Cake.Common.Tools.SpecFlow.TestExecutionReport.SpecFlowTestExecutionReportSettings settings) => throw new System.NotSupportedException();
#endregion
#region ReportUnitAliases
		protected void ReportUnit(Cake.Core.IO.DirectoryPath inputFolder) => throw new System.NotSupportedException();
		protected void ReportUnit(Cake.Core.IO.DirectoryPath inputFolder, Cake.Common.Tools.ReportUnit.ReportUnitSettings settings) => throw new System.NotSupportedException();
		protected void ReportUnit(Cake.Core.IO.DirectoryPath inputFolder, Cake.Core.IO.DirectoryPath outputFolder, Cake.Common.Tools.ReportUnit.ReportUnitSettings settings) => throw new System.NotSupportedException();
		protected void ReportUnit(Cake.Core.IO.FilePath inputFile, Cake.Core.IO.FilePath outputFile) => throw new System.NotSupportedException();
		protected void ReportUnit(Cake.Core.IO.FilePath inputFile, Cake.Core.IO.FilePath outputFile, Cake.Common.Tools.ReportUnit.ReportUnitSettings settings) => throw new System.NotSupportedException();
#endregion
#region ReportGeneratorAliases
		protected void ReportGenerator(System.String pattern, Cake.Core.IO.DirectoryPath targetDir) => throw new System.NotSupportedException();
		protected void ReportGenerator(System.String pattern, Cake.Core.IO.DirectoryPath targetDir, Cake.Common.Tools.ReportGenerator.ReportGeneratorSettings settings) => throw new System.NotSupportedException();
		protected void ReportGenerator(Cake.Core.IO.FilePath report, Cake.Core.IO.DirectoryPath targetDir) => throw new System.NotSupportedException();
		protected void ReportGenerator(Cake.Core.IO.FilePath report, Cake.Core.IO.DirectoryPath targetDir, Cake.Common.Tools.ReportGenerator.ReportGeneratorSettings settings) => throw new System.NotSupportedException();
		protected void ReportGenerator(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> reports, Cake.Core.IO.DirectoryPath targetDir) => throw new System.NotSupportedException();
		protected void ReportGenerator(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> reports, Cake.Core.IO.DirectoryPath targetDir, Cake.Common.Tools.ReportGenerator.ReportGeneratorSettings settings) => throw new System.NotSupportedException();
#endregion
#region OpenCoverAliases
		protected void OpenCover(System.Action<Cake.Core.ICakeContext> action, Cake.Core.IO.FilePath outputFile, Cake.Common.Tools.OpenCover.OpenCoverSettings settings) => throw new System.NotSupportedException();
#endregion
#region NSISAliases
		protected void MakeNSIS(Cake.Core.IO.FilePath scriptFile) => throw new System.NotSupportedException();
		protected void MakeNSIS(Cake.Core.IO.FilePath scriptFile, Cake.Common.Tools.NSIS.MakeNSISSettings settings) => throw new System.NotSupportedException();
#endregion
#region InspectCodeAliases
		protected void InspectCode(Cake.Core.IO.FilePath solution) => throw new System.NotSupportedException();
		protected void InspectCode(Cake.Core.IO.FilePath solution, Cake.Common.Tools.InspectCode.InspectCodeSettings settings) => throw new System.NotSupportedException();
		protected void InspectCodeFromConfig(Cake.Core.IO.FilePath configFile) => throw new System.NotSupportedException();
#endregion
#region InnoSetupAliases
		protected void InnoSetup(Cake.Core.IO.FilePath scriptFile) => throw new System.NotSupportedException();
		protected void InnoSetup(Cake.Core.IO.FilePath scriptFile, Cake.Common.Tools.InnoSetup.InnoSetupSettings settings) => throw new System.NotSupportedException();
#endregion
#region ILRepackAliases
		protected void ILRepack(Cake.Core.IO.FilePath outputFile, Cake.Core.IO.FilePath primaryAssembly, System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> assemblyPaths) => throw new System.NotSupportedException();
		protected void ILRepack(Cake.Core.IO.FilePath outputFile, Cake.Core.IO.FilePath primaryAssembly, System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> assemblyPaths, Cake.Common.Tools.ILRepack.ILRepackSettings settings) => throw new System.NotSupportedException();
#endregion
#region GitVersionAliases
		protected Cake.Common.Tools.GitVersion.GitVersion GitVersion() => throw new System.NotSupportedException();
		protected Cake.Common.Tools.GitVersion.GitVersion GitVersion(Cake.Common.Tools.GitVersion.GitVersionSettings settings) => throw new System.NotSupportedException();
#endregion
#region GitReleaseNotesAliases
		protected void GitReleaseNotes(Cake.Core.IO.FilePath outputFile, Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesSettings settings) => throw new System.NotSupportedException();
#endregion
#region GitReleaseManagerAliases
		protected void GitReleaseManagerCreate(System.String userName, System.String password, System.String owner, System.String repository) => throw new System.NotSupportedException();
		protected void GitReleaseManagerCreate(System.String userName, System.String password, System.String owner, System.String repository, Cake.Common.Tools.GitReleaseManager.Create.GitReleaseManagerCreateSettings settings) => throw new System.NotSupportedException();
		protected void GitReleaseManagerAddAssets(System.String userName, System.String password, System.String owner, System.String repository, System.String tagName, System.String assets) => throw new System.NotSupportedException();
		protected void GitReleaseManagerAddAssets(System.String userName, System.String password, System.String owner, System.String repository, System.String tagName, System.String assets, Cake.Common.Tools.GitReleaseManager.AddAssets.GitReleaseManagerAddAssetsSettings settings) => throw new System.NotSupportedException();
		protected void GitReleaseManagerClose(System.String userName, System.String password, System.String owner, System.String repository, System.String milestone) => throw new System.NotSupportedException();
		protected void GitReleaseManagerClose(System.String userName, System.String password, System.String owner, System.String repository, System.String milestone, Cake.Common.Tools.GitReleaseManager.Close.GitReleaseManagerCloseMilestoneSettings settings) => throw new System.NotSupportedException();
		protected void GitReleaseManagerPublish(System.String userName, System.String password, System.String owner, System.String repository, System.String tagName) => throw new System.NotSupportedException();
		protected void GitReleaseManagerPublish(System.String userName, System.String password, System.String owner, System.String repository, System.String tagName, Cake.Common.Tools.GitReleaseManager.Publish.GitReleaseManagerPublishSettings settings) => throw new System.NotSupportedException();
		protected void GitReleaseManagerExport(System.String userName, System.String password, System.String owner, System.String repository, Cake.Core.IO.FilePath fileOutputPath) => throw new System.NotSupportedException();
		protected void GitReleaseManagerExport(System.String userName, System.String password, System.String owner, System.String repository, Cake.Core.IO.FilePath fileOutputPath, Cake.Common.Tools.GitReleaseManager.Export.GitReleaseManagerExportSettings settings) => throw new System.NotSupportedException();
#endregion
#region GitLinkAliases
		protected void GitLink(Cake.Core.IO.DirectoryPath repositoryRootPath) => throw new System.NotSupportedException();
		protected void GitLink(Cake.Core.IO.DirectoryPath repositoryRootPath, Cake.Common.Tools.GitLink.GitLinkSettings settings) => throw new System.NotSupportedException();
#endregion
#region FixieAliases
		protected void Fixie(System.String pattern) => throw new System.NotSupportedException();
		protected void Fixie(System.String pattern, Cake.Common.Tools.Fixie.FixieSettings settings) => throw new System.NotSupportedException();
		protected void Fixie(System.Collections.Generic.IEnumerable<System.String> assemblies) => throw new System.NotSupportedException();
		protected void Fixie(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> assemblies) => throw new System.NotSupportedException();
		protected void Fixie(System.Collections.Generic.IEnumerable<System.String> assemblies, Cake.Common.Tools.Fixie.FixieSettings settings) => throw new System.NotSupportedException();
		protected void Fixie(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> assemblies, Cake.Common.Tools.Fixie.FixieSettings settings) => throw new System.NotSupportedException();
#endregion
#region DupFinderAliases
		protected void DupFinder(Cake.Core.IO.FilePath file) => throw new System.NotSupportedException();
		protected void DupFinder(Cake.Core.IO.FilePath file, Cake.Common.Tools.DupFinder.DupFinderSettings settings) => throw new System.NotSupportedException();
		protected void DupFinder(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> files) => throw new System.NotSupportedException();
		protected void DupFinder(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> files, Cake.Common.Tools.DupFinder.DupFinderSettings settings) => throw new System.NotSupportedException();
		protected void DupFinder(System.String pattern) => throw new System.NotSupportedException();
		protected void DupFinder(System.String pattern, Cake.Common.Tools.DupFinder.DupFinderSettings settings) => throw new System.NotSupportedException();
		protected void DupFinderFromConfig(Cake.Core.IO.FilePath configFile) => throw new System.NotSupportedException();
#endregion
#region DotNetCoreAliases
		protected void DotNetCoreExecute(Cake.Core.IO.FilePath assemblyPath) => throw new System.NotSupportedException();
		protected void DotNetCoreExecute(Cake.Core.IO.FilePath assemblyPath, Cake.Core.IO.ProcessArgumentBuilder arguments) => throw new System.NotSupportedException();
		protected void DotNetCoreExecute(Cake.Core.IO.FilePath assemblyPath, Cake.Core.IO.ProcessArgumentBuilder arguments, Cake.Common.Tools.DotNetCore.DotNetCoreSettings settings) => throw new System.NotSupportedException();
		protected void DotNetCoreRestore() => throw new System.NotSupportedException();
		protected void DotNetCoreRestore(System.String root) => throw new System.NotSupportedException();
		protected void DotNetCoreRestore(Cake.Common.Tools.DotNetCore.Restore.DotNetCoreRestoreSettings settings) => throw new System.NotSupportedException();
		protected void DotNetCoreRestore(System.String root, Cake.Common.Tools.DotNetCore.Restore.DotNetCoreRestoreSettings settings) => throw new System.NotSupportedException();
		protected void DotNetCoreBuild(System.String project) => throw new System.NotSupportedException();
		protected void DotNetCoreBuild(System.String project, Cake.Common.Tools.DotNetCore.Build.DotNetCoreBuildSettings settings) => throw new System.NotSupportedException();
		protected void DotNetCorePack(System.String project) => throw new System.NotSupportedException();
		protected void DotNetCorePack(System.String project, Cake.Common.Tools.DotNetCore.Pack.DotNetCorePackSettings settings) => throw new System.NotSupportedException();
		protected void DotNetCoreRun() => throw new System.NotSupportedException();
		protected void DotNetCoreRun(System.String project) => throw new System.NotSupportedException();
		protected void DotNetCoreRun(System.String project, Cake.Core.IO.ProcessArgumentBuilder arguments) => throw new System.NotSupportedException();
		protected void DotNetCoreRun(System.String project, Cake.Core.IO.ProcessArgumentBuilder arguments, Cake.Common.Tools.DotNetCore.Run.DotNetCoreRunSettings settings) => throw new System.NotSupportedException();
		protected void DotNetCorePublish(System.String project) => throw new System.NotSupportedException();
		protected void DotNetCorePublish(System.String project, Cake.Common.Tools.DotNetCore.Publish.DotNetCorePublishSettings settings) => throw new System.NotSupportedException();
		protected void DotNetCoreTest() => throw new System.NotSupportedException();
		protected void DotNetCoreTest(System.String project) => throw new System.NotSupportedException();
		protected void DotNetCoreTest(System.String project, Cake.Common.Tools.DotNetCore.Test.DotNetCoreTestSettings settings) => throw new System.NotSupportedException();
#endregion
#region DotCoverAliases
		protected void DotCoverAnalyse(System.Action<Cake.Core.ICakeContext> action, Cake.Core.IO.FilePath outputFile, Cake.Common.Tools.DotCover.Analyse.DotCoverAnalyseSettings settings) => throw new System.NotSupportedException();
		protected void DotCoverCover(System.Action<Cake.Core.ICakeContext> action, Cake.Core.IO.FilePath outputFile, Cake.Common.Tools.DotCover.Cover.DotCoverCoverSettings settings) => throw new System.NotSupportedException();
		protected void DotCoverReport(Cake.Core.IO.FilePath sourceFile, Cake.Core.IO.FilePath outputFile, Cake.Common.Tools.DotCover.Report.DotCoverReportSettings settings) => throw new System.NotSupportedException();
		protected void DotCoverMerge(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> sourceFiles, Cake.Core.IO.FilePath outputFile) => throw new System.NotSupportedException();
		protected void DotCoverMerge(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> sourceFiles, Cake.Core.IO.FilePath outputFile, Cake.Common.Tools.DotCover.Merge.DotCoverMergeSettings settings) => throw new System.NotSupportedException();
#endregion
#region ChocolateyAliases
		protected void ChocolateyPack(Cake.Core.IO.FilePath nuspecFilePath, Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings settings) => throw new System.NotSupportedException();
		protected void ChocolateyPack(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> filePaths, Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings settings) => throw new System.NotSupportedException();
		protected void ChocolateyPack(Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings settings) => throw new System.NotSupportedException();
		protected void ChocolateyInstall(System.String packageId) => throw new System.NotSupportedException();
		protected void ChocolateyInstall(System.String packageId, Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings settings) => throw new System.NotSupportedException();
		protected void ChocolateyInstallFromConfig(Cake.Core.IO.FilePath packageConfigPath) => throw new System.NotSupportedException();
		protected void ChocolateyInstallFromConfig(Cake.Core.IO.FilePath packageConfigPath, Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings settings) => throw new System.NotSupportedException();
		protected void ChocolateyUninstall(System.String packageId) => throw new System.NotSupportedException();
		protected void ChocolateyUninstall(System.String packageId, Cake.Common.Tools.Chocolatey.Uninstall.ChocolateyUninstallSettings settings) => throw new System.NotSupportedException();
		protected void ChocolateyUninstall(System.Collections.Generic.IEnumerable<System.String> packageIds) => throw new System.NotSupportedException();
		protected void ChocolateyUninstall(System.Collections.Generic.IEnumerable<System.String> packageIds, Cake.Common.Tools.Chocolatey.Uninstall.ChocolateyUninstallSettings settings) => throw new System.NotSupportedException();
		protected void ChocolateyPin(System.String name, Cake.Common.Tools.Chocolatey.Pin.ChocolateyPinSettings settings) => throw new System.NotSupportedException();
		protected void ChocolateyApiKey(System.String apiKey, System.String source, Cake.Common.Tools.Chocolatey.ApiKey.ChocolateyApiKeySettings settings) => throw new System.NotSupportedException();
		protected void ChocolateyConfig(System.String name, System.String value, Cake.Common.Tools.Chocolatey.Config.ChocolateyConfigSettings settings) => throw new System.NotSupportedException();
		protected void ChocolateyEnableFeature(System.String name) => throw new System.NotSupportedException();
		protected void ChocolateyEnableFeature(System.String name, Cake.Common.Tools.Chocolatey.Features.ChocolateyFeatureSettings settings) => throw new System.NotSupportedException();
		protected void ChocolateyDisableFeature(System.String name) => throw new System.NotSupportedException();
		protected void ChocolateyDisableFeature(System.String name, Cake.Common.Tools.Chocolatey.Features.ChocolateyFeatureSettings settings) => throw new System.NotSupportedException();
		protected void ChocolateyAddSource(System.String name, System.String source) => throw new System.NotSupportedException();
		protected void ChocolateyAddSource(System.String name, System.String source, Cake.Common.Tools.Chocolatey.Sources.ChocolateySourcesSettings settings) => throw new System.NotSupportedException();
		protected void ChocolateyRemoveSource(System.String name) => throw new System.NotSupportedException();
		protected void ChocolateyRemoveSource(System.String name, Cake.Common.Tools.Chocolatey.Sources.ChocolateySourcesSettings settings) => throw new System.NotSupportedException();
		protected void ChocolateyEnableSource(System.String name) => throw new System.NotSupportedException();
		protected void ChocolateyEnableSource(System.String name, Cake.Common.Tools.Chocolatey.Sources.ChocolateySourcesSettings settings) => throw new System.NotSupportedException();
		protected void ChocolateyDisableSource(System.String name) => throw new System.NotSupportedException();
		protected void ChocolateyDisableSource(System.String name, Cake.Common.Tools.Chocolatey.Sources.ChocolateySourcesSettings settings) => throw new System.NotSupportedException();
		protected void ChocolateyPush(Cake.Core.IO.FilePath packageFilePath, Cake.Common.Tools.Chocolatey.Push.ChocolateyPushSettings settings) => throw new System.NotSupportedException();
		protected void ChocolateyPush(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> packageFilePaths, Cake.Common.Tools.Chocolatey.Push.ChocolateyPushSettings settings) => throw new System.NotSupportedException();
		protected void ChocolateyUpgrade(System.String packageId) => throw new System.NotSupportedException();
		protected void ChocolateyUpgrade(System.String packageId, Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings settings) => throw new System.NotSupportedException();
		protected void ChocolateyNew(System.String packageId) => throw new System.NotSupportedException();
		protected void ChocolateyNew(System.String packageId, Cake.Common.Tools.Chocolatey.New.ChocolateyNewSettings settings) => throw new System.NotSupportedException();
#endregion
#region XUnit2Aliases
		protected void XUnit2(System.String pattern) => throw new System.NotSupportedException();
		protected void XUnit2(System.String pattern, Cake.Common.Tools.XUnit.XUnit2Settings settings) => throw new System.NotSupportedException();
		protected void XUnit2(System.Collections.Generic.IEnumerable<System.String> assemblies) => throw new System.NotSupportedException();
		protected void XUnit2(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> assemblies) => throw new System.NotSupportedException();
		protected void XUnit2(System.Collections.Generic.IEnumerable<System.String> assemblies, Cake.Common.Tools.XUnit.XUnit2Settings settings) => throw new System.NotSupportedException();
		protected void XUnit2(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> assemblies, Cake.Common.Tools.XUnit.XUnit2Settings settings) => throw new System.NotSupportedException();
#endregion
#region XUnitAliases
		protected void XUnit(System.String pattern) => throw new System.NotSupportedException();
		protected void XUnit(System.String pattern, Cake.Common.Tools.XUnit.XUnitSettings settings) => throw new System.NotSupportedException();
		protected void XUnit(System.Collections.Generic.IEnumerable<System.String> assemblies) => throw new System.NotSupportedException();
		protected void XUnit(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> assemblies) => throw new System.NotSupportedException();
		protected void XUnit(System.Collections.Generic.IEnumerable<System.String> assemblies, Cake.Common.Tools.XUnit.XUnitSettings settings) => throw new System.NotSupportedException();
		protected void XUnit(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> assemblies, Cake.Common.Tools.XUnit.XUnitSettings settings) => throw new System.NotSupportedException();
#endregion
#region XBuildAliases
		protected void XBuild(Cake.Core.IO.FilePath solution) => throw new System.NotSupportedException();
		protected void XBuild(Cake.Core.IO.FilePath solution, System.Action<Cake.Common.Tools.XBuild.XBuildSettings> configurator) => throw new System.NotSupportedException();
		protected void XBuild(Cake.Core.IO.FilePath solution, Cake.Common.Tools.XBuild.XBuildSettings settings) => throw new System.NotSupportedException();
#endregion
#region WiXAliases
		protected void WiXCandle(System.String pattern, Cake.Common.Tools.WiX.CandleSettings settings) => throw new System.NotSupportedException();
		protected void WiXCandle(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> sourceFiles, Cake.Common.Tools.WiX.CandleSettings settings) => throw new System.NotSupportedException();
		protected void WiXLight(System.String pattern, Cake.Common.Tools.WiX.LightSettings settings) => throw new System.NotSupportedException();
		protected void WiXLight(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> objectFiles, Cake.Common.Tools.WiX.LightSettings settings) => throw new System.NotSupportedException();
		protected void WiXHeat(Cake.Core.IO.DirectoryPath directoryPath, Cake.Core.IO.FilePath outputFile, Cake.Common.Tools.WiX.Heat.WiXHarvestType harvestType) => throw new System.NotSupportedException();
		protected void WiXHeat(Cake.Core.IO.DirectoryPath directoryPath, Cake.Core.IO.FilePath outputFile, Cake.Common.Tools.WiX.Heat.WiXHarvestType harvestType, Cake.Common.Tools.WiX.Heat.HeatSettings settings) => throw new System.NotSupportedException();
		protected void WiXHeat(Cake.Core.IO.FilePath objectFile, Cake.Core.IO.FilePath outputFile, Cake.Common.Tools.WiX.Heat.WiXHarvestType harvestType) => throw new System.NotSupportedException();
		protected void WiXHeat(Cake.Core.IO.FilePath objectFile, Cake.Core.IO.FilePath outputFile, Cake.Common.Tools.WiX.Heat.WiXHarvestType harvestType, Cake.Common.Tools.WiX.Heat.HeatSettings settings) => throw new System.NotSupportedException();
		protected void WiXHeat(System.String harvestTarget, Cake.Core.IO.FilePath outputFile, Cake.Common.Tools.WiX.Heat.WiXHarvestType harvestType) => throw new System.NotSupportedException();
		protected void WiXHeat(System.String harvestTarget, Cake.Core.IO.FilePath outputFile, Cake.Common.Tools.WiX.Heat.WiXHarvestType harvestType, Cake.Common.Tools.WiX.Heat.HeatSettings settings) => throw new System.NotSupportedException();
#endregion
#region SignToolSignAliases
		protected void Sign(System.String assembly, Cake.Common.Tools.SignTool.SignToolSignSettings settings) => throw new System.NotSupportedException();
		protected void Sign(Cake.Core.IO.FilePath assembly, Cake.Common.Tools.SignTool.SignToolSignSettings settings) => throw new System.NotSupportedException();
		protected void Sign(System.Collections.Generic.IEnumerable<System.String> assemblies, Cake.Common.Tools.SignTool.SignToolSignSettings settings) => throw new System.NotSupportedException();
		protected void Sign(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> assemblies, Cake.Common.Tools.SignTool.SignToolSignSettings settings) => throw new System.NotSupportedException();
#endregion
#region RoundhouseAliases
		protected void RoundhouseMigrate(Cake.Common.Tools.Roundhouse.RoundhouseSettings settings) => throw new System.NotSupportedException();
		protected void RoundhouseDrop(Cake.Common.Tools.Roundhouse.RoundhouseSettings settings) => throw new System.NotSupportedException();
#endregion
#region OctopusDeployAliases
		protected void OctoCreateRelease(System.String projectName, Cake.Common.Tools.OctopusDeploy.CreateReleaseSettings settings) => throw new System.NotSupportedException();
		protected void OctoPush(System.String server, System.String apiKey, Cake.Core.IO.FilePath packagePath, Cake.Common.Tools.OctopusDeploy.OctopusPushSettings settings) => throw new System.NotSupportedException();
		protected void OctoPush(System.String server, System.String apiKey, System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> packagePaths, Cake.Common.Tools.OctopusDeploy.OctopusPushSettings settings) => throw new System.NotSupportedException();
		protected void OctoPack(System.String id) => throw new System.NotSupportedException();
		protected void OctoPack(System.String id, Cake.Common.Tools.OctopusDeploy.OctopusPackSettings settings) => throw new System.NotSupportedException();
		protected void OctoDeployRelease(System.String server, System.String apiKey, System.String projectName, System.String deployTo, System.String releaseNumber, Cake.Common.Tools.OctopusDeploy.OctopusDeployReleaseDeploymentSettings settings) => throw new System.NotSupportedException();
#endregion
#region NUnit3Aliases
		protected void NUnit3(System.String pattern) => throw new System.NotSupportedException();
		protected void NUnit3(System.String pattern, Cake.Common.Tools.NUnit.NUnit3Settings settings) => throw new System.NotSupportedException();
		protected void NUnit3(System.Collections.Generic.IEnumerable<System.String> assemblies) => throw new System.NotSupportedException();
		protected void NUnit3(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> assemblies) => throw new System.NotSupportedException();
		protected void NUnit3(System.Collections.Generic.IEnumerable<System.String> assemblies, Cake.Common.Tools.NUnit.NUnit3Settings settings) => throw new System.NotSupportedException();
		protected void NUnit3(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> assemblies, Cake.Common.Tools.NUnit.NUnit3Settings settings) => throw new System.NotSupportedException();
#endregion
#region NUnitAliases
		protected void NUnit(System.String pattern) => throw new System.NotSupportedException();
		protected void NUnit(System.String pattern, Cake.Common.Tools.NUnit.NUnitSettings settings) => throw new System.NotSupportedException();
		protected void NUnit(System.Collections.Generic.IEnumerable<System.String> assemblies) => throw new System.NotSupportedException();
		protected void NUnit(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> assemblies) => throw new System.NotSupportedException();
		protected void NUnit(System.Collections.Generic.IEnumerable<System.String> assemblies, Cake.Common.Tools.NUnit.NUnitSettings settings) => throw new System.NotSupportedException();
		protected void NUnit(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> assemblies, Cake.Common.Tools.NUnit.NUnitSettings settings) => throw new System.NotSupportedException();
#endregion
#region NuGetAliases
		protected void NuGetPack(Cake.Core.IO.FilePath filePath, Cake.Common.Tools.NuGet.Pack.NuGetPackSettings settings) => throw new System.NotSupportedException();
		protected void NuGetPack(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> filePaths, Cake.Common.Tools.NuGet.Pack.NuGetPackSettings settings) => throw new System.NotSupportedException();
		protected void NuGetPack(Cake.Common.Tools.NuGet.Pack.NuGetPackSettings settings) => throw new System.NotSupportedException();
		protected void NuGetRestore(Cake.Core.IO.FilePath targetFilePath) => throw new System.NotSupportedException();
		protected void NuGetRestore(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> targetFilePaths) => throw new System.NotSupportedException();
		protected void NuGetRestore(Cake.Core.IO.FilePath targetFilePath, Cake.Common.Tools.NuGet.Restore.NuGetRestoreSettings settings) => throw new System.NotSupportedException();
		protected void NuGetRestore(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> targetFilePaths, Cake.Common.Tools.NuGet.Restore.NuGetRestoreSettings settings) => throw new System.NotSupportedException();
		protected void NuGetPush(Cake.Core.IO.FilePath packageFilePath, Cake.Common.Tools.NuGet.Push.NuGetPushSettings settings) => throw new System.NotSupportedException();
		protected void NuGetPush(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> packageFilePaths, Cake.Common.Tools.NuGet.Push.NuGetPushSettings settings) => throw new System.NotSupportedException();
		protected void NuGetAddSource(System.String name, System.String source) => throw new System.NotSupportedException();
		protected void NuGetAddSource(System.String name, System.String source, Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings settings) => throw new System.NotSupportedException();
		protected void NuGetRemoveSource(System.String name, System.String source) => throw new System.NotSupportedException();
		protected void NuGetRemoveSource(System.String name, System.String source, Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings settings) => throw new System.NotSupportedException();
		protected System.Boolean NuGetHasSource(System.String source) => throw new System.NotSupportedException();
		protected System.Boolean NuGetHasSource(System.String source, Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings settings) => throw new System.NotSupportedException();
		protected void NuGetInstall(System.String packageId) => throw new System.NotSupportedException();
		protected void NuGetInstall(System.Collections.Generic.IEnumerable<System.String> packageIds) => throw new System.NotSupportedException();
		protected void NuGetInstall(System.String packageId, Cake.Common.Tools.NuGet.Install.NuGetInstallSettings settings) => throw new System.NotSupportedException();
		protected void NuGetInstall(System.Collections.Generic.IEnumerable<System.String> packageIds, Cake.Common.Tools.NuGet.Install.NuGetInstallSettings settings) => throw new System.NotSupportedException();
		protected void NuGetInstallFromConfig(Cake.Core.IO.FilePath packageConfigPath) => throw new System.NotSupportedException();
		protected void NuGetInstallFromConfig(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> packageConfigPaths) => throw new System.NotSupportedException();
		protected void NuGetInstallFromConfig(Cake.Core.IO.FilePath packageConfigPath, Cake.Common.Tools.NuGet.Install.NuGetInstallSettings settings) => throw new System.NotSupportedException();
		protected void NuGetInstallFromConfig(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> packageConfigPaths, Cake.Common.Tools.NuGet.Install.NuGetInstallSettings settings) => throw new System.NotSupportedException();
		protected void NuGetSetApiKey(System.String apiKey, System.String source, Cake.Common.Tools.NuGet.SetApiKey.NuGetSetApiKeySettings settings) => throw new System.NotSupportedException();
		protected void NuGetSetApiKey(System.String apiKey, System.String source) => throw new System.NotSupportedException();
		protected void NuGetSetProxy(System.String proxy, System.String username, System.String password, Cake.Common.Tools.NuGet.SetProxy.NuGetSetProxySettings settings) => throw new System.NotSupportedException();
		protected void NuGetSetProxy(System.String proxy, System.String username, System.String password) => throw new System.NotSupportedException();
		protected void NuGetUpdate(Cake.Core.IO.FilePath targetFile) => throw new System.NotSupportedException();
		protected void NuGetUpdate(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> targetFiles) => throw new System.NotSupportedException();
		protected void NuGetUpdate(Cake.Core.IO.FilePath targetFile, Cake.Common.Tools.NuGet.Update.NuGetUpdateSettings settings) => throw new System.NotSupportedException();
		protected void NuGetUpdate(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> targetFiles, Cake.Common.Tools.NuGet.Update.NuGetUpdateSettings settings) => throw new System.NotSupportedException();
		protected void NuGetAdd(System.String packageId, System.String source) => throw new System.NotSupportedException();
		protected void NuGetAdd(System.String packageId, Cake.Common.Tools.NuGet.Add.NuGetAddSettings settings) => throw new System.NotSupportedException();
		protected void NuGetInit(System.String source, System.String destination) => throw new System.NotSupportedException();
		protected void NuGetInit(System.String source, System.String destination, Cake.Common.Tools.NuGet.Init.NuGetInitSettings settings) => throw new System.NotSupportedException();
#endregion
#region MSTestAliases
		protected void MSTest(System.String pattern) => throw new System.NotSupportedException();
		protected void MSTest(System.String pattern, Cake.Common.Tools.MSTest.MSTestSettings settings) => throw new System.NotSupportedException();
		protected void MSTest(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> assemblyPaths) => throw new System.NotSupportedException();
		protected void MSTest(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> assemblyPaths, Cake.Common.Tools.MSTest.MSTestSettings settings) => throw new System.NotSupportedException();
#endregion
#region MSBuildAliases
		protected void MSBuild(Cake.Core.IO.FilePath solution) => throw new System.NotSupportedException();
		protected void MSBuild(Cake.Core.IO.FilePath solution, System.Action<Cake.Common.Tools.MSBuild.MSBuildSettings> configurator) => throw new System.NotSupportedException();
		protected void MSBuild(Cake.Core.IO.FilePath solution, Cake.Common.Tools.MSBuild.MSBuildSettings settings) => throw new System.NotSupportedException();
#endregion
#region ILMergeAliases
		protected void ILMerge(Cake.Core.IO.FilePath outputFile, Cake.Core.IO.FilePath primaryAssembly, System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> assemblyPaths) => throw new System.NotSupportedException();
		protected void ILMerge(Cake.Core.IO.FilePath outputFile, Cake.Core.IO.FilePath primaryAssembly, System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> assemblyPaths, Cake.Common.Tools.ILMerge.ILMergeSettings settings) => throw new System.NotSupportedException();
#endregion
#region CakeAliases
		protected void CakeExecuteScript(Cake.Core.IO.FilePath cakeScriptPath) => throw new System.NotSupportedException();
		protected void CakeExecuteScript(Cake.Core.IO.FilePath cakeScriptPath, Cake.Common.Tools.Cake.CakeSettings settings) => throw new System.NotSupportedException();
		protected void CakeExecuteExpression(System.String cakeExpression) => throw new System.NotSupportedException();
		protected void CakeExecuteExpression(System.String cakeExpression, Cake.Common.Tools.Cake.CakeSettings settings) => throw new System.NotSupportedException();
#endregion
#region TextTransformationAliases
		protected Cake.Common.Text.TextTransformation<Cake.Core.Text.TextTransformationTemplate> TransformText(System.String template) => throw new System.NotSupportedException();
		protected Cake.Common.Text.TextTransformation<Cake.Core.Text.TextTransformationTemplate> TransformText(System.String template, System.String leftPlaceholder, System.String rightPlaceholder) => throw new System.NotSupportedException();
		protected Cake.Common.Text.TextTransformation<Cake.Core.Text.TextTransformationTemplate> TransformTextFile(Cake.Core.IO.FilePath path) => throw new System.NotSupportedException();
		protected Cake.Common.Text.TextTransformation<Cake.Core.Text.TextTransformationTemplate> TransformTextFile(Cake.Core.IO.FilePath path, System.String leftPlaceholder, System.String rightPlaceholder) => throw new System.NotSupportedException();
#endregion
#region SolutionAliases
		protected Cake.Common.Solution.SolutionParserResult ParseSolution(Cake.Core.IO.FilePath solutionPath) => throw new System.NotSupportedException();
#endregion
#region ProjectAliases
		protected Cake.Common.Solution.Project.ProjectParserResult ParseProject(Cake.Core.IO.FilePath projectPath) => throw new System.NotSupportedException();
#endregion
#region XmlDocAliases
		protected System.Collections.Generic.IEnumerable<Cake.Common.Solution.Project.XmlDoc.XmlDocExampleCode> ParseXmlDocExampleCode(Cake.Core.IO.FilePath xmlFilePath) => throw new System.NotSupportedException();
		protected System.Collections.Generic.IEnumerable<Cake.Common.Solution.Project.XmlDoc.XmlDocExampleCode> ParseXmlDocFilesExampleCode(System.String pattern) => throw new System.NotSupportedException();
#endregion
#region AssemblyInfoAliases
		protected void CreateAssemblyInfo(Cake.Core.IO.FilePath outputPath, Cake.Common.Solution.Project.Properties.AssemblyInfoSettings settings) => throw new System.NotSupportedException();
		protected Cake.Common.Solution.Project.Properties.AssemblyInfoParseResult ParseAssemblyInfo(Cake.Core.IO.FilePath assemblyInfoPath) => throw new System.NotSupportedException();
#endregion
#region HttpAliases
		protected Cake.Core.IO.FilePath DownloadFile(System.String address) => throw new System.NotSupportedException();
		protected Cake.Core.IO.FilePath DownloadFile(System.String address, Cake.Common.Net.DownloadFileSettings settings) => throw new System.NotSupportedException();
		protected Cake.Core.IO.FilePath DownloadFile(System.Uri address) => throw new System.NotSupportedException();
		protected Cake.Core.IO.FilePath DownloadFile(System.Uri address, Cake.Common.Net.DownloadFileSettings settings) => throw new System.NotSupportedException();
		protected void DownloadFile(System.String address, Cake.Core.IO.FilePath outputPath) => throw new System.NotSupportedException();
		protected void DownloadFile(System.String address, Cake.Core.IO.FilePath outputPath, Cake.Common.Net.DownloadFileSettings settings) => throw new System.NotSupportedException();
		protected void DownloadFile(System.Uri address, Cake.Core.IO.FilePath outputPath, Cake.Common.Net.DownloadFileSettings settings) => throw new System.NotSupportedException();
		protected void UploadFile(System.Uri address, Cake.Core.IO.FilePath filePath) => throw new System.NotSupportedException();
		protected void UploadFile(System.String address, Cake.Core.IO.FilePath filePath) => throw new System.NotSupportedException();
		protected void UploadFile(System.Uri address, System.Byte[] data, System.String fileName) => throw new System.NotSupportedException();
		protected void UploadFile(System.String address, System.Byte[] data, System.String fileName) => throw new System.NotSupportedException();
#endregion
#region DirectoryAliases
		protected Cake.Common.IO.Paths.ConvertableDirectoryPath Directory(System.String path) => throw new System.NotSupportedException();
		protected void DeleteDirectories(System.Collections.Generic.IEnumerable<Cake.Core.IO.DirectoryPath> directories, System.Boolean recursive) => throw new System.NotSupportedException();
		protected void DeleteDirectories(System.Collections.Generic.IEnumerable<System.String> directories, System.Boolean recursive) => throw new System.NotSupportedException();
		protected void DeleteDirectory(Cake.Core.IO.DirectoryPath path, System.Boolean recursive) => throw new System.NotSupportedException();
		protected void CleanDirectories(System.String pattern) => throw new System.NotSupportedException();
		protected void CleanDirectories(System.String pattern, System.Func<Cake.Core.IO.IFileSystemInfo,System.Boolean> predicate) => throw new System.NotSupportedException();
		protected void CleanDirectories(System.Collections.Generic.IEnumerable<Cake.Core.IO.DirectoryPath> directories) => throw new System.NotSupportedException();
		protected void CleanDirectories(System.Collections.Generic.IEnumerable<System.String> directories) => throw new System.NotSupportedException();
		protected void CleanDirectory(Cake.Core.IO.DirectoryPath path) => throw new System.NotSupportedException();
		protected void CleanDirectory(Cake.Core.IO.DirectoryPath path, System.Func<Cake.Core.IO.IFileSystemInfo,System.Boolean> predicate) => throw new System.NotSupportedException();
		protected void CreateDirectory(Cake.Core.IO.DirectoryPath path) => throw new System.NotSupportedException();
		protected void EnsureDirectoryExists(Cake.Core.IO.DirectoryPath path) => throw new System.NotSupportedException();
		protected void CopyDirectory(Cake.Core.IO.DirectoryPath source, Cake.Core.IO.DirectoryPath destination) => throw new System.NotSupportedException();
		protected System.Boolean DirectoryExists(Cake.Core.IO.DirectoryPath path) => throw new System.NotSupportedException();
		protected Cake.Core.IO.DirectoryPath MakeAbsolute(Cake.Core.IO.DirectoryPath path) => throw new System.NotSupportedException();
		protected void MoveDirectory(Cake.Core.IO.DirectoryPath directoryPath, Cake.Core.IO.DirectoryPath targetDirectoryPath) => throw new System.NotSupportedException();
#endregion
#region FileAliases
		protected Cake.Common.IO.Paths.ConvertableFilePath File(System.String path) => throw new System.NotSupportedException();
		protected void CopyFileToDirectory(Cake.Core.IO.FilePath filePath, Cake.Core.IO.DirectoryPath targetDirectoryPath) => throw new System.NotSupportedException();
		protected void CopyFile(Cake.Core.IO.FilePath filePath, Cake.Core.IO.FilePath targetFilePath) => throw new System.NotSupportedException();
		protected void CopyFiles(System.String pattern, Cake.Core.IO.DirectoryPath targetDirectoryPath) => throw new System.NotSupportedException();
		protected void CopyFiles(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> filePaths, Cake.Core.IO.DirectoryPath targetDirectoryPath) => throw new System.NotSupportedException();
		protected void CopyFiles(System.Collections.Generic.IEnumerable<System.String> filePaths, Cake.Core.IO.DirectoryPath targetDirectoryPath) => throw new System.NotSupportedException();
		protected void CopyFiles(System.String pattern, Cake.Core.IO.DirectoryPath targetDirectoryPath, System.Boolean preserveFolderStructure) => throw new System.NotSupportedException();
		protected void CopyFiles(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> filePaths, Cake.Core.IO.DirectoryPath targetDirectoryPath, System.Boolean preserveFolderStructure) => throw new System.NotSupportedException();
		protected void CopyFiles(System.Collections.Generic.IEnumerable<System.String> filePaths, Cake.Core.IO.DirectoryPath targetDirectoryPath, System.Boolean preserveFolderStructure) => throw new System.NotSupportedException();
		protected void MoveFileToDirectory(Cake.Core.IO.FilePath filePath, Cake.Core.IO.DirectoryPath targetDirectoryPath) => throw new System.NotSupportedException();
		protected void MoveFiles(System.String pattern, Cake.Core.IO.DirectoryPath targetDirectoryPath) => throw new System.NotSupportedException();
		protected void MoveFiles(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> filePaths, Cake.Core.IO.DirectoryPath targetDirectoryPath) => throw new System.NotSupportedException();
		protected void MoveFile(Cake.Core.IO.FilePath filePath, Cake.Core.IO.FilePath targetFilePath) => throw new System.NotSupportedException();
		protected void DeleteFiles(System.String pattern) => throw new System.NotSupportedException();
		protected void DeleteFiles(System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> filePaths) => throw new System.NotSupportedException();
		protected void DeleteFile(Cake.Core.IO.FilePath filePath) => throw new System.NotSupportedException();
		protected System.Boolean FileExists(Cake.Core.IO.FilePath filePath) => throw new System.NotSupportedException();
		protected Cake.Core.IO.FilePath MakeAbsolute(Cake.Core.IO.FilePath path) => throw new System.NotSupportedException();
		protected System.Int64 FileSize(Cake.Core.IO.FilePath filePath) => throw new System.NotSupportedException();
#endregion
#region GlobbingAliases
		protected Cake.Core.IO.FilePathCollection GetFiles(System.String pattern) => throw new System.NotSupportedException();
		protected Cake.Core.IO.FilePathCollection GetFiles(System.String pattern, System.Func<Cake.Core.IO.IDirectory,System.Boolean> predicate) => throw new System.NotSupportedException();
		protected Cake.Core.IO.DirectoryPathCollection GetDirectories(System.String pattern) => throw new System.NotSupportedException();
		protected Cake.Core.IO.DirectoryPathCollection GetDirectories(System.String pattern, System.Func<Cake.Core.IO.IDirectory,System.Boolean> predicate) => throw new System.NotSupportedException();
#endregion
#region ZipAliases
		protected void Zip(Cake.Core.IO.DirectoryPath rootPath, Cake.Core.IO.FilePath outputPath) => throw new System.NotSupportedException();
		protected void Zip(Cake.Core.IO.DirectoryPath rootPath, Cake.Core.IO.FilePath outputPath, System.String pattern) => throw new System.NotSupportedException();
		protected void Zip(Cake.Core.IO.DirectoryPath rootPath, Cake.Core.IO.FilePath outputPath, System.Collections.Generic.IEnumerable<Cake.Core.IO.FilePath> filePaths) => throw new System.NotSupportedException();
		protected void Zip(Cake.Core.IO.DirectoryPath rootPath, Cake.Core.IO.FilePath outputPath, System.Collections.Generic.IEnumerable<System.String> filePaths) => throw new System.NotSupportedException();
		protected void Unzip(Cake.Core.IO.FilePath zipFile, Cake.Core.IO.DirectoryPath outputPath) => throw new System.NotSupportedException();
#endregion
#region LoggingAliases
		protected void Error(System.String format, params System.Object[] args) => throw new System.NotSupportedException();
		protected void Error(Cake.Core.Diagnostics.LogAction logAction) => throw new System.NotSupportedException();
		protected void Error(System.Object value) => throw new System.NotSupportedException();
		protected void Error(System.String value) => throw new System.NotSupportedException();
		protected void Warning(System.String format, params System.Object[] args) => throw new System.NotSupportedException();
		protected void Warning(Cake.Core.Diagnostics.LogAction logAction) => throw new System.NotSupportedException();
		protected void Warning(System.Object value) => throw new System.NotSupportedException();
		protected void Warning(System.String value) => throw new System.NotSupportedException();
		protected void Information(System.String format, params System.Object[] args) => throw new System.NotSupportedException();
		protected void Information(Cake.Core.Diagnostics.LogAction logAction) => throw new System.NotSupportedException();
		protected void Information(System.Object value) => throw new System.NotSupportedException();
		protected void Information(System.String value) => throw new System.NotSupportedException();
		protected void Verbose(System.String format, params System.Object[] args) => throw new System.NotSupportedException();
		protected void Verbose(Cake.Core.Diagnostics.LogAction logAction) => throw new System.NotSupportedException();
		protected void Verbose(System.Object value) => throw new System.NotSupportedException();
		protected void Verbose(System.String value) => throw new System.NotSupportedException();
		protected void Debug(System.String format, params System.Object[] args) => throw new System.NotSupportedException();
		protected void Debug(Cake.Core.Diagnostics.LogAction logAction) => throw new System.NotSupportedException();
		protected void Debug(System.Object value) => throw new System.NotSupportedException();
		protected void Debug(System.String value) => throw new System.NotSupportedException();
#endregion
#region BuildSystemAliases
		protected Cake.Common.Build.BuildSystem BuildSystem => throw new System.NotSupportedException();
		protected Cake.Common.Build.AppVeyor.IAppVeyorProvider AppVeyor => throw new System.NotSupportedException();
		protected Cake.Common.Build.TeamCity.ITeamCityProvider TeamCity => throw new System.NotSupportedException();
		protected Cake.Common.Build.MyGet.IMyGetProvider MyGet => throw new System.NotSupportedException();
		protected Cake.Common.Build.Bamboo.IBambooProvider Bamboo => throw new System.NotSupportedException();
		protected Cake.Common.Build.ContinuaCI.IContinuaCIProvider ContinuaCI => throw new System.NotSupportedException();
		protected Cake.Common.Build.Jenkins.IJenkinsProvider Jenkins => throw new System.NotSupportedException();
		protected Cake.Common.Build.Bitrise.IBitriseProvider Bitrise => throw new System.NotSupportedException();
		protected Cake.Common.Build.TravisCI.ITravisCIProvider TravisCI => throw new System.NotSupportedException();
		protected Cake.Common.Build.BitbucketPipelines.IBitbucketPipelinesProvider BitbucketPipelines => throw new System.NotSupportedException();
		protected Cake.Common.Build.GoCD.IGoCDProvider GoCD => throw new System.NotSupportedException();
		protected Cake.Common.Build.GitLabCI.IGitLabCIProvider GitLabCI => throw new System.NotSupportedException();
		protected Cake.Common.Build.TFBuild.ITFBuildProvider TFBuild => throw new System.NotSupportedException();
#endregion
	}
}
